plugins {
  alias(libs.plugins.kotlin.jvm) apply false
  alias(libs.plugins.kotlinter) apply false
}

subprojects {
  group = GROUP
  version = VERSION_NAME

  apply plugin: libs.plugins.kotlinter.get().pluginId

  plugins.withId('org.jetbrains.kotlin.jvm') {
    compileKotlin {
      kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
        freeCompilerArgs = [
            "-progressive",
            '-opt-in=kotlin.contracts.ExperimentalContracts'
        ]
      }
    }
  }

  configurations.configureEach {
    resolutionStrategy.eachDependency {
      if (requested.group == "com.android.tools.build" && requested.name == "aapt2-proto") {
        useVersion(libs.versions.aapt2Proto.get())
        because("we need to keep depenedencies in sync with bundletool")
      }
      if (requested.group == "com.google.protobuf" && requested.name == "protobuf-java") {
        useVersion(libs.versions.protobufJava.get())
        because("we need to keep depenedencies in sync with bundletool")
      }
      if (requested.group == "com.google.guava" && requested.name == "guava") {
        useVersion(libs.versions.guava.get())
        because("we need to keep depenedencies in sync with bundletool")
      }
    }
  }
}
